[DEFAULT]
# default applies to each downsampling level
normalization = normcdf
# what kind of affine transform, 0 full, 1 rigid, 2 isotropic
# 3 means isotropic and no xy shift and no rotation around the section plane
affine_model = 3
# what kind of factorization between 2D and 3D
# 0 means do nothing
# 1 means old behaviour (put everything into 3D if you can)
factorization = 0
# randomly subsample slices
# 0 for all slices, I will do 200 which is about half
slice_sampling = 200
slice_sampling = 0
# note on march 17, I decided to switch downsampling on J to 2 instead of 3
# since dI = 50 and dJ = 20.8



# priors
piM_width = 3000
piM_width = 6000
piM = 0.5
piB = 0.25
piA = 0.25

# cost function weights
sigmaR = 5e4 
sigmaRJ = 5e2
sigmaM = 0.05
sigmaB = 0.1
sigmaA = 0.5

sigmaM = 0.1
sigmaB = 0.2
sigmaA = 1.0

sigmaM = 0.2
sigmaB = 0.4
sigmaA = 2.0




# bounds on step sizes, fac is multiple of voxel size
VImax_fac = 0.05
VJmax_fac = 0.05
LJmax = 0.005
LImax = 0.005
TJmax_fac = 0.5
TImax_fac = 0.5

# smoothness parameters for 3D, 2D, and preconditioners
p = 2
a = 400
pJ = 2
aJ = 100
ap_fac = 5
aJp_fac = 5

# flow
nt = 5
ntJ = 0
order = 4


[DOWNLOOP1]
# downsampling
downI = 4
downJ = 9
blurI = 1.333
blurJ = 3

# iterations
start_3d_diffeo = 500
start_2d_diffeo = 600
start_2d_affine = 0
niter = 1000





# step sizes
eVJ = 5e3
eVI = 2e6
eTI = 2e-6
eLI = 2e-13
eLJ = 2e-11
eTJ = 5e-4
post_affine_reduce = 0.1

# now that there are twice as many slices
# these 3D step sizes are too big
# let's reduce them all
eVI = 1e6
eTI = 1e-6
eLI = 1e-13




[DOWNLOOP2]
# downsampling
downI = 2
downJ = 4
blurI = 0.667
blurJ = 1.333

# iterations
start_3d_diffeo = 0
start_2d_diffeo = 0
start_2d_affine = 0
niter = 500


# step sizes
eVJ = 2e3
eVI = 1e6
post_affine_reduce = 0.05
post_affine_reduce = 0.00
# smaller
eVI = 5e5


[DOWNLOOP3]
# downsampling
downI = 1
downJ = 2
blurI = 0.333
blurJ = 0.667

# iterations
start_3d_diffeo = 0
start_2d_diffeo = 0
start_2d_affine = 0
niter = 100

# step sizes
eVJ = 1e3
eVI = 5e5
post_affine_reduce = 0.05
post_affine_reduce = 0.00
# reduce
eVI = 2e5