# for marmoset, default is double all length scales from mouse
# this includes doubling sigmaRs
# in test I reduce iterations a lot



# default applies to each downsampling level
[DEFAULT]
# what kind of affine transform, 0 full, 1 rigid, 2 isotropic
# 3 means isotropic and no xy shift and no rotation around the section plane
affine_model = 3
# what kind of factorization between 2D and 3D
# 0 means do nothing
# 1 means old behaviour (put everything into 3D if you can)
factorization = 0
# randomly subsample slices
# 0 for all slices
# slice_sampling = 25


# priors
piM_width = 6000
piM = 0.5
piB = 0.25
piA = 0.25
piM = 0.8
piB = 0.1
piA = 0.1


# cost function weights
sigmaR = 1e5
sigmaRJ = 1e3
sigmaM = 0.05
sigmaB = 0.1
sigmaA = 0.5
# for marmoset these were too narrow
sigmaM = 0.1
sigmaB = 0.2
sigmaA = 1.0

sigmaM = 0.2
sigmaB = 0.5
sigmaA = 2.0



# bounds on step sizes, fac is multiple of voxel size
VImax_fac = 0.05
VJmax_fac = 0.05
LJmax = 0.005
LImax = 0.005
TJmax_fac = 0.5
TImax_fac = 0.5

# smoothness parameters for 3D, 2D, and preconditioners
p = 2
a = 800
pJ = 2
aJ = 200
ap_fac = 5
aJp_fac = 5

# flow
nt = 5
ntJ = 0
order = 4


[DOWNLOOP1]
# downsampling
downI = 4
downJ = 12
blurI = 1.333
blurJ = 4
# marmoset
downJ = 8
blurJ = 2.667

# iterations
start_3d_diffeo = 500
start_2d_diffeo = 600
start_2d_affine = 50
niter = 1000
start_3d_diffeo = 100
start_2d_diffeo = 150






# step sizes
eVJ = 5e3
eVI = 2e6
eTI = 2e-6
eLI = 2e-13
eLJ = 2e-11
eTJ = 5e-4
post_affine_reduce = 0.1

# marmoset, since doubling sigmaM, double the above
# not linear because there was oscilation
eVJ = 1e4
eVI = 5e6
eTI = 5e-6
eTJ = 1e-3





[DOWNLOOP2]
# downsampling
downI = 2
downJ = 6
blurI = 0.667
blurJ = 2
# marmoset
downJ = 4
blurJ = 1.333



# iterations
start_3d_diffeo = 0
start_2d_diffeo = 0
start_2d_affine = 0
niter = 500



# step sizes
eVJ = 2e3
eVI = 1e6
post_affine_reduce = 0.05

# double
eVJ = 5e3
eVI = 2e6


[DOWNLOOP3]
# downsampling
downI = 1
downJ = 3
blurI = 0.333
blurJ = 1
# marmoset
downJ = 2
blurJ = 0.667


# iterations
start_3d_diffeo = 0
start_2d_diffeo = 0
start_2d_affine = 0
niter = 100


# step sizes
eVJ = 1e3
eVI = 5e5
post_affine_reduce = 0.05
# double
eVJ = 2e3
eVI = 1e6